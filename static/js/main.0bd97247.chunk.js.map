{"version":3,"sources":["components/InfoBox.js","util.js","components/Map.js","components/Table.js","components/LineGraph.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridlines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Footer","href","target","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","SetMapCountries","setCasesType","getCountriesData","name","iso2","sortedData","loadAllCountryInfo","onCountryChange","event","countryCode","FormControl","Select","variant","onChange","MenuItem","key","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0bd97247.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./css/InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textPrimary\">\r\n          {title}\r\n        </Typography>\r\n\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {\" \"}\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circle on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"../util\";\r\nimport \"./css/Map.css\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./css/Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{cases}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridlines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          //include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\" }) {\r\n  const [data, setData] = useState({});\r\n\r\n  const buildChartData = (data, casesType) => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport \"./css/Footer.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      Made with &hearts; by &nbsp;\r\n      <a href=\"https://niteshseram.me\" target=\"_blank\">\r\n        S Nitesh Singh\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useState } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\";\nimport LineGraph from \"./components/LineGraph\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./App.css\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 20, lng: 77 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, SetMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  const getCountriesData = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n\n        const sortedData = sortData(data);\n        setCountries(countries);\n        SetMapCountries(data);\n        setTableData(sortedData);\n      });\n  };\n\n  const loadAllCountryInfo = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  };\n\n  useEffect(() => {\n    getCountriesData();\n    loadAllCountryInfo();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        countryCode === \"worldwide\"\n          ? setMapCenter([20, 77])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__main\">\n        <div className=\"app__left\">\n          {/* Header */}\n          <div className=\"app__header\">\n            <h1>COVID-19 TRACKER</h1>\n\n            {/* Country Drop Down */}\n            <FormControl className=\"app__dropdown\">\n              <Select\n                variant=\"outlined\"\n                onChange={onCountryChange}\n                value={country}\n              >\n                <MenuItem value=\"worldwide\" key=\"worldwide\">\n                  Worldwide\n                </MenuItem>\n                {countries.map((country) => (\n                  <MenuItem value={country.value} key={country.value}>\n                    {country.name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n\n          <div className=\"app__stats\">\n            <InfoBox\n              isRed\n              active={casesType === \"cases\"}\n              onClick={(e) => setCasesType(\"cases\")}\n              title=\"Coronavirus cases\"\n              cases={prettyPrintStat(countryInfo.todayCases)}\n              total={prettyPrintStat(countryInfo.cases)}\n            />\n            <InfoBox\n              active={casesType === \"recovered\"}\n              onClick={(e) => setCasesType(\"recovered\")}\n              title=\"Recovered\"\n              cases={prettyPrintStat(countryInfo.todayRecovered)}\n              total={prettyPrintStat(countryInfo.recovered)}\n            />\n            <InfoBox\n              isRed\n              active={casesType === \"deaths\"}\n              onClick={(e) => setCasesType(\"deaths\")}\n              title=\"Deaths\"\n              cases={prettyPrintStat(countryInfo.todayDeaths)}\n              total={prettyPrintStat(countryInfo.deaths)}\n            />\n          </div>\n\n          <Map\n            casesType={casesType}\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={mapZoom}\n          />\n        </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <div className=\"app__information\">\n              <h3>Live Cases by Country</h3>\n              <Table countries={tableData} />\n              <h3>Worldwide new {casesType}</h3>\n              <LineGraph casesType={casesType} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}